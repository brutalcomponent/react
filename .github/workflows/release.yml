name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump"
        required: true
        default: "patch"
        type: choice
        options: [patch, minor, major, prerelease]
      preid:
        description: "Pre-release id (dev, rc, beta, alpha)"
        required: false
        default: ""
        type: string
      explicitVersion:
        description: "Override version (e.g. 0.2.0-dev)"
        required: false
        default: ""
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Compute next version
        id: v
        run: |
          BUMP="${{ github.event.inputs.bump }}"
          PREID="${{ github.event.inputs.preid }}"
          EXPLICIT="${{ github.event.inputs.explicitVersion }}"

          if [ -n "$EXPLICIT" ]; then
            NEXT="$EXPLICIT"
            echo "strategy=explicit" >> $GITHUB_OUTPUT
          else
            if [ "$BUMP" = "prerelease" ]; then
              if [ -z "$PREID" ]; then
                echo "prerelease bump requires 'preid'"; exit 1
              fi
              npm version prerelease --preid="$PREID" -m "chore(release): v%s" > /dev/null 2>&1 || true
              NEXT=$(node -p "require('./package.json').version")
              echo "strategy=prerelease" >> $GITHUB_OUTPUT
            else
              npm version "$BUMP" -m "chore(release): v%s" > /dev/null 2>&1 || true
              NEXT=$(node -p "require('./package.json').version")
              echo "strategy=$BUMP" >> $GITHUB_OUTPUT
            fi
          fi

          if [ -z "$NEXT" ]; then
            echo "No version computed"; exit 1
          fi
          echo "next=$NEXT" >> $GITHUB_OUTPUT

      - name: Tag and push
        run: |
          NEXT="${{ steps.v.outputs.next }}"
          TAG="v$NEXT"

          if [ "${{ steps.v.outputs.strategy }}" = "explicit" ]; then
            node -e "const fs=require('fs'); const p=require('./package.json'); p.version='${NEXT}'; fs.writeFileSync('package.json', JSON.stringify(p,null,2));"
            git add package.json
            git commit -m "chore(release): v${NEXT}" || true
          fi

          git push
          git tag -a "$TAG" -m "release(${NEXT}): automated tag"
          git push origin "$TAG"
